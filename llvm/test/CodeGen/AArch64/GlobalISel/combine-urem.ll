; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc < %s -mtriple=aarch64-unknown-unknown -global-isel=false | FileCheck %s --check-prefixes=CHECK-SD
; RUN: llc < %s -mtriple=aarch64-unknown-unknown -global-isel | FileCheck %s --check-prefixes=CHECK-GI


define i8 @test7s8(i8 %a) {
; CHECK-SD-LABEL: test7s8:
; CHECK-SD:       // %bb.0:
; CHECK-SD-NEXT:    mov w8, #37 // =0x25
; CHECK-SD-NEXT:    and w9, w0, #0xff
; CHECK-SD-NEXT:    mul w8, w9, w8
; CHECK-SD-NEXT:    lsr w8, w8, #8
; CHECK-SD-NEXT:    sub w9, w0, w8
; CHECK-SD-NEXT:    and w9, w9, #0xfe
; CHECK-SD-NEXT:    add w8, w8, w9, lsr #1
; CHECK-SD-NEXT:    lsr w8, w8, #2
; CHECK-SD-NEXT:    sub w8, w8, w8, lsl #3
; CHECK-SD-NEXT:    add w0, w0, w8
; CHECK-SD-NEXT:    ret
;
; CHECK-GI-LABEL: test7s8:
; CHECK-GI:       // %bb.0:
; CHECK-GI-NEXT:    mov w8, #37 // =0x25
; CHECK-GI-NEXT:    and w9, w0, #0xff
; CHECK-GI-NEXT:    mul w8, w9, w8
; CHECK-GI-NEXT:    lsr w8, w8, #8
; CHECK-GI-NEXT:    sub w9, w0, w8
; CHECK-GI-NEXT:    ubfx w9, w9, #1, #7
; CHECK-GI-NEXT:    add w8, w9, w8
; CHECK-GI-NEXT:    ubfx w8, w8, #2, #6
; CHECK-GI-NEXT:    lsl w9, w8, #3
; CHECK-GI-NEXT:    sub w8, w9, w8
; CHECK-GI-NEXT:    sub w0, w0, w8
; CHECK-GI-NEXT:    ret
  %r = urem i8 %a, 7
  ret i8 %r
}

define i8 @test100s8(i8 %a) {
; CHECK-SD-LABEL: test100s8:
; CHECK-SD:       // %bb.0:
; CHECK-SD-NEXT:    mov w8, #41 // =0x29
; CHECK-SD-NEXT:    and w9, w0, #0xff
; CHECK-SD-NEXT:    mul w8, w9, w8
; CHECK-SD-NEXT:    mov w9, #100 // =0x64
; CHECK-SD-NEXT:    lsr w8, w8, #12
; CHECK-SD-NEXT:    msub w0, w8, w9, w0
; CHECK-SD-NEXT:    ret
;
; CHECK-GI-LABEL: test100s8:
; CHECK-GI:       // %bb.0:
; CHECK-GI-NEXT:    mov w8, #41 // =0x29
; CHECK-GI-NEXT:    and w9, w0, #0xff
; CHECK-GI-NEXT:    mul w8, w9, w8
; CHECK-GI-NEXT:    mov w9, #100 // =0x64
; CHECK-GI-NEXT:    lsr w8, w8, #8
; CHECK-GI-NEXT:    lsr w8, w8, #4
; CHECK-GI-NEXT:    msub w0, w8, w9, w0
; CHECK-GI-NEXT:    ret
  %r = urem i8 %a, 100
  ret i8 %r
}

define i32 @test7s32(i32 %a) {
; CHECK-SD-LABEL: test7s32:
; CHECK-SD:       // %bb.0:
; CHECK-SD-NEXT:    mov w8, #18725 // =0x4925
; CHECK-SD-NEXT:    movk w8, #9362, lsl #16
; CHECK-SD-NEXT:    umull x8, w0, w8
; CHECK-SD-NEXT:    lsr x8, x8, #32
; CHECK-SD-NEXT:    sub w9, w0, w8
; CHECK-SD-NEXT:    add w8, w8, w9, lsr #1
; CHECK-SD-NEXT:    lsr w8, w8, #2
; CHECK-SD-NEXT:    sub w8, w8, w8, lsl #3
; CHECK-SD-NEXT:    add w0, w0, w8
; CHECK-SD-NEXT:    ret
;
; CHECK-GI-LABEL: test7s32:
; CHECK-GI:       // %bb.0:
; CHECK-GI-NEXT:    mov w8, #18725 // =0x4925
; CHECK-GI-NEXT:    movk w8, #9362, lsl #16
; CHECK-GI-NEXT:    umull x8, w0, w8
; CHECK-GI-NEXT:    lsr x8, x8, #32
; CHECK-GI-NEXT:    sub w9, w0, w8
; CHECK-GI-NEXT:    add w8, w8, w9, lsr #1
; CHECK-GI-NEXT:    lsr w8, w8, #2
; CHECK-GI-NEXT:    lsl w9, w8, #3
; CHECK-GI-NEXT:    sub w8, w9, w8
; CHECK-GI-NEXT:    sub w0, w0, w8
; CHECK-GI-NEXT:    ret
 %c = urem i32 %a, 7
 ret i32 %c
}

define i32 @test100s32(i32 %a) {
; CHECK-SD-LABEL: test100s32:
; CHECK-SD:       // %bb.0:
; CHECK-SD-NEXT:    mov w8, #34079 // =0x851f
; CHECK-SD-NEXT:    mov w9, #100 // =0x64
; CHECK-SD-NEXT:    movk w8, #20971, lsl #16
; CHECK-SD-NEXT:    umull x8, w0, w8
; CHECK-SD-NEXT:    lsr x8, x8, #37
; CHECK-SD-NEXT:    msub w0, w8, w9, w0
; CHECK-SD-NEXT:    ret
;
; CHECK-GI-LABEL: test100s32:
; CHECK-GI:       // %bb.0:
; CHECK-GI-NEXT:    mov w8, #34079 // =0x851f
; CHECK-GI-NEXT:    mov w9, #100 // =0x64
; CHECK-GI-NEXT:    movk w8, #20971, lsl #16
; CHECK-GI-NEXT:    umull x8, w0, w8
; CHECK-GI-NEXT:    lsr x8, x8, #32
; CHECK-GI-NEXT:    lsr w8, w8, #5
; CHECK-GI-NEXT:    msub w0, w8, w9, w0
; CHECK-GI-NEXT:    ret
 %c = urem i32 %a, 100
 ret i32 %c
}

define <8 x i16> @test7v8s16(<8 x i16> %a) {
; CHECK-SD-LABEL: test7v8s16:
; CHECK-SD:       // %bb.0:
; CHECK-SD-NEXT:    mov w8, #9363 // =0x2493
; CHECK-SD-NEXT:    dup v1.8h, w8
; CHECK-SD-NEXT:    umull2 v2.4s, v0.8h, v1.8h
; CHECK-SD-NEXT:    umull v1.4s, v0.4h, v1.4h
; CHECK-SD-NEXT:    uzp2 v1.8h, v1.8h, v2.8h
; CHECK-SD-NEXT:    sub v2.8h, v0.8h, v1.8h
; CHECK-SD-NEXT:    usra v1.8h, v2.8h, #1
; CHECK-SD-NEXT:    movi v2.8h, #7
; CHECK-SD-NEXT:    ushr v1.8h, v1.8h, #2
; CHECK-SD-NEXT:    mls v0.8h, v1.8h, v2.8h
; CHECK-SD-NEXT:    ret
;
; CHECK-GI-LABEL: test7v8s16:
; CHECK-GI:       // %bb.0:
; CHECK-GI-NEXT:    adrp x8, .LCPI4_0
; CHECK-GI-NEXT:    ldr q1, [x8, :lo12:.LCPI4_0]
; CHECK-GI-NEXT:    umull2 v2.4s, v0.8h, v1.8h
; CHECK-GI-NEXT:    umull v1.4s, v0.4h, v1.4h
; CHECK-GI-NEXT:    uzp2 v1.8h, v1.8h, v2.8h
; CHECK-GI-NEXT:    sub v2.8h, v0.8h, v1.8h
; CHECK-GI-NEXT:    usra v1.8h, v2.8h, #1
; CHECK-GI-NEXT:    movi v2.8h, #7
; CHECK-GI-NEXT:    ushr v1.8h, v1.8h, #2
; CHECK-GI-NEXT:    mls v0.8h, v1.8h, v2.8h
; CHECK-GI-NEXT:    ret
  %r = urem <8 x i16> %a, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <8 x i16> %r
}

define <8 x i16> @test100v8s16(<8 x i16> %a) {
; CHECK-SD-LABEL: test100v8s16:
; CHECK-SD:       // %bb.0:
; CHECK-SD-NEXT:    mov w8, #5243 // =0x147b
; CHECK-SD-NEXT:    ushr v2.8h, v0.8h, #2
; CHECK-SD-NEXT:    dup v1.8h, w8
; CHECK-SD-NEXT:    umull2 v3.4s, v2.8h, v1.8h
; CHECK-SD-NEXT:    umull v1.4s, v2.4h, v1.4h
; CHECK-SD-NEXT:    movi v2.8h, #100
; CHECK-SD-NEXT:    uzp2 v1.8h, v1.8h, v3.8h
; CHECK-SD-NEXT:    ushr v1.8h, v1.8h, #1
; CHECK-SD-NEXT:    mls v0.8h, v1.8h, v2.8h
; CHECK-SD-NEXT:    ret
;
; CHECK-GI-LABEL: test100v8s16:
; CHECK-GI:       // %bb.0:
; CHECK-GI-NEXT:    adrp x8, .LCPI5_0
; CHECK-GI-NEXT:    ushr v1.8h, v0.8h, #2
; CHECK-GI-NEXT:    ldr q2, [x8, :lo12:.LCPI5_0]
; CHECK-GI-NEXT:    umull2 v3.4s, v1.8h, v2.8h
; CHECK-GI-NEXT:    umull v1.4s, v1.4h, v2.4h
; CHECK-GI-NEXT:    movi v2.8h, #100
; CHECK-GI-NEXT:    uzp2 v1.8h, v1.8h, v3.8h
; CHECK-GI-NEXT:    ushr v1.8h, v1.8h, #1
; CHECK-GI-NEXT:    mls v0.8h, v1.8h, v2.8h
; CHECK-GI-NEXT:    ret
  %r = urem <8 x i16> %a, <i16 100, i16 100, i16 100, i16 100, i16 100, i16 100, i16 100, i16 100>
  ret <8 x i16> %r
}

define <4 x i32> @test7v4s32(<4 x i32> %a) {
; CHECK-SD-LABEL: test7v4s32:
; CHECK-SD:       // %bb.0:
; CHECK-SD-NEXT:    mov w8, #18725 // =0x4925
; CHECK-SD-NEXT:    movk w8, #9362, lsl #16
; CHECK-SD-NEXT:    dup v1.4s, w8
; CHECK-SD-NEXT:    umull2 v2.2d, v0.4s, v1.4s
; CHECK-SD-NEXT:    umull v1.2d, v0.2s, v1.2s
; CHECK-SD-NEXT:    uzp2 v1.4s, v1.4s, v2.4s
; CHECK-SD-NEXT:    sub v2.4s, v0.4s, v1.4s
; CHECK-SD-NEXT:    usra v1.4s, v2.4s, #1
; CHECK-SD-NEXT:    movi v2.4s, #7
; CHECK-SD-NEXT:    ushr v1.4s, v1.4s, #2
; CHECK-SD-NEXT:    mls v0.4s, v1.4s, v2.4s
; CHECK-SD-NEXT:    ret
;
; CHECK-GI-LABEL: test7v4s32:
; CHECK-GI:       // %bb.0:
; CHECK-GI-NEXT:    adrp x8, .LCPI6_0
; CHECK-GI-NEXT:    ldr q1, [x8, :lo12:.LCPI6_0]
; CHECK-GI-NEXT:    umull2 v2.2d, v0.4s, v1.4s
; CHECK-GI-NEXT:    umull v1.2d, v0.2s, v1.2s
; CHECK-GI-NEXT:    uzp2 v1.4s, v1.4s, v2.4s
; CHECK-GI-NEXT:    sub v2.4s, v0.4s, v1.4s
; CHECK-GI-NEXT:    usra v1.4s, v2.4s, #1
; CHECK-GI-NEXT:    movi v2.4s, #7
; CHECK-GI-NEXT:    ushr v1.4s, v1.4s, #2
; CHECK-GI-NEXT:    mls v0.4s, v1.4s, v2.4s
; CHECK-GI-NEXT:    ret
  %r = urem <4 x i32> %a, <i32 7, i32 7, i32 7, i32 7>
  ret <4 x i32> %r
}

define <4 x i32> @test100v4s32(<4 x i32> %a) {
; CHECK-SD-LABEL: test100v4s32:
; CHECK-SD:       // %bb.0:
; CHECK-SD-NEXT:    mov w8, #34079 // =0x851f
; CHECK-SD-NEXT:    movk w8, #20971, lsl #16
; CHECK-SD-NEXT:    dup v1.4s, w8
; CHECK-SD-NEXT:    umull2 v2.2d, v0.4s, v1.4s
; CHECK-SD-NEXT:    umull v1.2d, v0.2s, v1.2s
; CHECK-SD-NEXT:    uzp2 v1.4s, v1.4s, v2.4s
; CHECK-SD-NEXT:    movi v2.4s, #100
; CHECK-SD-NEXT:    ushr v1.4s, v1.4s, #5
; CHECK-SD-NEXT:    mls v0.4s, v1.4s, v2.4s
; CHECK-SD-NEXT:    ret
;
; CHECK-GI-LABEL: test100v4s32:
; CHECK-GI:       // %bb.0:
; CHECK-GI-NEXT:    adrp x8, .LCPI7_0
; CHECK-GI-NEXT:    ldr q1, [x8, :lo12:.LCPI7_0]
; CHECK-GI-NEXT:    umull2 v2.2d, v0.4s, v1.4s
; CHECK-GI-NEXT:    umull v1.2d, v0.2s, v1.2s
; CHECK-GI-NEXT:    uzp2 v1.4s, v1.4s, v2.4s
; CHECK-GI-NEXT:    movi v2.4s, #100
; CHECK-GI-NEXT:    ushr v1.4s, v1.4s, #5
; CHECK-GI-NEXT:    mls v0.4s, v1.4s, v2.4s
; CHECK-GI-NEXT:    ret
  %r = urem <4 x i32> %a, <i32 100, i32 100, i32 100, i32 100>
  ret <4 x i32> %r
}

